AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'
Description: >-
  Simple API Endpoint configured using Swagger specified inline and backed by a
  Lambda function
Resources:
  MyApi:
    DependsOn: get
    Type: 'AWS::Serverless::Api'
    Properties:
      DefinitionUri: ./swagger-hard.yaml
      StageName: Prod
      Variables:
        # NOTE: Before using this template, replace the <<region>> and <<account>> fields
        #       in Lambda integration URI in the swagger file to region and accountId 
        #       you are deploying to
        LFget: !Ref get
        LFgetpost: !Ref getpost
        LFgetpostbycatagory: !Ref getpostbycatagory
        LFlistposts: !Ref listposts
        LFlogin: !Ref login
        LFrss: !Ref rss
        LFpage: !Ref page
        LFsendmessage: !Ref sendmessage
        LFabout: !Ref about
        LFcontact: !Ref contact
        LFaddcategory: !Ref addcategory
        LFdeletepost: !Ref deletepost
        LFeditcategory: !Ref editcategory
        LFgetcategories: !Ref getcategories
        LFgetpostadmin: !Ref getpostadmin
        LFgetsettings: !Ref getsettings
        LFlistpostsadmin: !Ref listpostsadmin
        LFmovecategory: !Ref movecategory
        LFpublishpost: !Ref publishpost
        LFremovecategory: !Ref removecategory
        LFsetsettings: !Ref setsettings
        LFunpublishpost: !Ref unpublishpost
        LFuploadimage: !Ref uploadimage
        LFuploadpost: !Ref uploadpost
        LFuploadtemplateimage: !Ref uploadtemplateimage
        LFgettemplates: !Ref gettemplates
  get:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${AWS::StackName}-get'
      Handler: get.handler
      Runtime: nodejs4.3
      MemorySize: 512
      Timeout: 10
      CodeUri:
        Bucket: all-ctrail-logs
        Key: index.zip
      Role: !GetAtt 
        - RootRole
        - Arn
      Events:
        GetResource:
          Type: Api
          Properties:
            Path: /
            RestApiId: !Ref MyApi
            Method: get
  page:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${AWS::StackName}-page'
      Handler: get.handler
      Runtime: nodejs4.3
      MemorySize: 512
      Timeout: 10
      CodeUri: ./src/public/get/
      Role: !GetAtt 
        - RootRole
        - Arn
      Events:
        GetResource:
          Type: Api
          Properties:
            Path: /page
            RestApiId: !Ref MyApi
            Method: get
  getpost:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${AWS::StackName}-getpost'
      Handler: get_post.handler
      Runtime: nodejs4.3
      MemorySize: 512
      Timeout: 10
      CodeUri: ./src/public/get_post/
      Role: !GetAtt 
        - RootRole
        - Arn
      Events:
        GetResource:
          Type: Api
          Properties:
            Path: /post/{post-id} 
            RestApiId: !Ref MyApi
            Method: get
  getpostbycatagory:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${AWS::StackName}-getpostsbycategory'
      Handler: get_posts_by_category.handler
      Runtime: nodejs4.3
      MemorySize: 512
      Timeout: 10
      CodeUri: ./src/public/get_posts_by_category/
      Role: !GetAtt 
        - RootRole
        - Arn
      Events:
        GetResource:
          Type: Api
          Properties:
            Path: /get-categories
            RestApiId: !Ref MyApi
            Method: get
  listposts:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${AWS::StackName}-listposts'
      Handler: list_posts.handler
      Runtime: nodejs4.3
      MemorySize: 512
      Timeout: 10
      CodeUri: ./src/public/list_posts/
      Role: !GetAtt 
        - RootRole
        - Arn
      Events:
        GetResource:
          Type: Api
          Properties:
            Path: /list
            RestApiId: !Ref MyApi
            Method: get
  gettemplates:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${AWS::StackName}-get_templates'
      Handler: get_templates.handler
      Runtime: nodejs4.3
      MemorySize: 512
      Timeout: 10
      CodeUri: ./src/admin/get_templates/
      Role: !GetAtt 
        - RootRole
        - Arn
      Events:
        GetResource:
          Type: Api
          Properties:
            Path: /get-templates
            RestApiId: !Ref MyApi
            Method: post
  login:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${AWS::StackName}-login'
      Handler: login.handler
      Runtime: nodejs4.3
      MemorySize: 512
      Timeout: 10
      CodeUri: ./src/public/login/
      Role: !GetAtt 
        - RootRole
        - Arn
      Events:
        GetResource:
          Type: Api
          Properties:
            Path: /login
            RestApiId: !Ref MyApi
            Method: post
  rss:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${AWS::StackName}-rss'
      Handler: rss.handler
      Runtime: nodejs4.3
      MemorySize: 512
      Timeout: 10
      CodeUri: ./src/public/rss/
      Role: !GetAtt 
        - RootRole
        - Arn
      Events:
        GetResource:
          Type: Api
          Properties:
            Path: /rss
            RestApiId: !Ref MyApi
            Method: get
  sendmessage:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${AWS::StackName}-sendmessage'
      Handler: send_message.handler
      Runtime: nodejs4.3
      MemorySize: 512
      Timeout: 10
      CodeUri: ./src/public/send_message/
      Role: !GetAtt 
        - RootRole
        - Arn
      Events:
        GetResource:
          Type: Api
          Properties:
            Path: /send-message
            RestApiId: !Ref MyApi
            Method: post
  about:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${AWS::StackName}-about'
      Handler: about.handler
      Runtime: nodejs4.3
      MemorySize: 512
      Timeout: 10
      CodeUri: ./src/public/about/
      Role: !GetAtt 
        - RootRole
        - Arn
      Events:
        GetResource:
          Type: Api
          Properties:
            Path: /about
            RestApiId: !Ref MyApi
            Method: get
  contact:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${AWS::StackName}-contact'
      Handler: contact.handler
      Runtime: nodejs4.3
      MemorySize: 512
      Timeout: 10
      CodeUri: ./src/public/contact/
      Role: !GetAtt 
        - RootRole
        - Arn
      Events:
        GetResource:
          Type: Api
          Properties:
            Path: /contact
            RestApiId: !Ref MyApi
            Method: get
  addcategory:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${AWS::StackName}-addcategory'
      Handler: add_category.handler
      Runtime: nodejs4.3
      MemorySize: 512
      Timeout: 10
      CodeUri: ./src/admin/add_category/
      Role: !GetAtt 
        - RootRole
        - Arn
      Events:
        GetResource:
          Type: Api
          Properties:
            Path: /add-category 
            RestApiId: !Ref MyApi
            Method: post
  deletepost:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${AWS::StackName}-deletepost'
      Handler: delete_post.handler
      Runtime: nodejs4.3
      MemorySize: 512
      Timeout: 10
      CodeUri: ./src/admin/delete_post/
      Role: !GetAtt 
        - RootRole
        - Arn
      Events:
        GetResource:
          Type: Api
          Properties:
            Path: /delete-post 
            RestApiId: !Ref MyApi
            Method: post
  editcategory:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${AWS::StackName}-editcategory'
      Handler: edit_category.handler
      Runtime: nodejs4.3
      MemorySize: 512
      Timeout: 10
      CodeUri: ./src/admin/edit_category/
      Role: !GetAtt 
        - RootRole
        - Arn
      Events:
        GetResource:
          Type: Api
          Properties:
            Path: /edit-category 
            RestApiId: !Ref MyApi
            Method: post
  getcategories:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${AWS::StackName}-getcategories'
      Handler: get_categories.handler
      Runtime: nodejs4.3
      MemorySize: 512
      Timeout: 10
      CodeUri: ./src/admin/get_categories/
      Role: !GetAtt 
        - RootRole
        - Arn
      Events:
        GetResource:
          Type: Api
          Properties:
            Path: /get-categories 
            RestApiId: !Ref MyApi
            Method: get
  getpostadmin:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${AWS::StackName}-getpostadmin'
      Handler: get_post_admin.handler
      Runtime: nodejs4.3
      MemorySize: 512
      Timeout: 10
      CodeUri: ./src/admin/get_post_admin/
      Role: !GetAtt 
        - RootRole
        - Arn
      Events:
        GetResource:
          Type: Api
          Properties:
            Path: /list-posts-admin
            RestApiId: !Ref MyApi
            Method: post
  getsettings:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${AWS::StackName}-getsettings'
      Handler: get_settings.handler
      Runtime: nodejs4.3
      MemorySize: 512
      Timeout: 10
      CodeUri: ./src/admin/get_settings/
      Role: !GetAtt 
        - RootRole
        - Arn
      Events:
        GetResource:
          Type: Api
          Properties:
            Path: /get-settings
            RestApiId: !Ref MyApi
            Method: post
  listpostsadmin:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${AWS::StackName}-listpostsadmin'
      Handler: list_posts_admin.handler
      Runtime: nodejs4.3
      MemorySize: 512
      Timeout: 10
      CodeUri: ./src/admin/list_posts_admin/
      Role: !GetAtt 
        - RootRole
        - Arn
      Events:
        GetResource:
          Type: Api
          Properties:
            Path: /list-posts-admin 
            RestApiId: !Ref MyApi
            Method: get
  movecategory:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${AWS::StackName}-movecategory'
      Handler: move_category.handler
      Runtime: nodejs4.3
      MemorySize: 512
      Timeout: 10
      CodeUri: ./src/admin/move_category/
      Role: !GetAtt 
        - RootRole
        - Arn
      Events:
        GetResource:
          Type: Api
          Properties:
            Path: /move-category 
            RestApiId: !Ref MyApi
            Method: post
  publishpost:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${AWS::StackName}-publishpost'
      Handler: publish_post.handler
      Runtime: nodejs4.3
      MemorySize: 512
      Timeout: 10
      CodeUri: ./src/admin/publish_post/
      Role: !GetAtt 
        - RootRole
        - Arn
      Events:
        GetResource:
          Type: Api
          Properties:
            Path: /publish-post 
            RestApiId: !Ref MyApi
            Method: post
  removecategory:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${AWS::StackName}-removecategory'
      Handler: remove_category.handler
      Runtime: nodejs4.3
      MemorySize: 512
      Timeout: 10
      CodeUri: ./src/admin/remove_category/
      Role: !GetAtt 
        - RootRole
        - Arn
      Events:
        GetResource:
          Type: Api
          Properties:
            Path: /remove-category 
            RestApiId: !Ref MyApi
            Method: post
  setsettings:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${AWS::StackName}-setsettings'
      Handler: set_settings.handler
      Runtime: nodejs4.3
      MemorySize: 512
      Timeout: 10
      CodeUri: ./src/admin/set_settings/
      Role: !GetAtt 
        - RootRole
        - Arn
      Events:
        GetResource:
          Type: Api
          Properties:
            Path: /set-settings 
            RestApiId: !Ref MyApi
            Method: post
  unpublishpost:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${AWS::StackName}-unpublishpost'
      Handler: unpublish_post.handler
      Runtime: nodejs4.3
      MemorySize: 512
      Timeout: 10
      CodeUri: ./src/admin/unpublish_post/
      Role: !GetAtt 
        - RootRole
        - Arn
      Events:
        GetResource:
          Type: Api
          Properties:
            Path: /unpublish-post 
            RestApiId: !Ref MyApi
            Method: post
  uploadimage:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${AWS::StackName}-uploadimage'
      Handler: upload_image.handler
      Runtime: nodejs4.3
      MemorySize: 512
      Timeout: 10
      CodeUri: ./src/admin/upload_image/
      Role: !GetAtt 
        - RootRole
        - Arn
      Events:
        GetResource:
          Type: Api
          Properties:
            Path: /upload-image 
            RestApiId: !Ref MyApi
            Method: post
  uploadpost:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${AWS::StackName}-uploadpost'
      Handler: upload_post.handler
      Runtime: nodejs4.3
      MemorySize: 512
      Timeout: 10
      CodeUri: ./src/admin/upload_post/
      Role: !GetAtt 
        - RootRole
        - Arn
      Events:
        GetResource:
          Type: Api
          Properties:
            Path: /submit-post 
            RestApiId: !Ref MyApi
            Method: post
  uploadtemplateimage:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${AWS::StackName}-uploadtemplateimage'
      Handler: upload_template_image.handler
      Runtime: nodejs4.3
      MemorySize: 512
      Timeout: 10
      CodeUri: ./src/admin/upload_template_image/
      Role: !GetAtt 
        - RootRole
        - Arn
      Events:
        GetResource:
          Type: Api
          Properties:
            Path: /upload-template-image 
            RestApiId: !Ref MyApi
            Method: post
  RolePolicies:
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - s3:DeleteObject
          - s3:GetObject
          - s3:PutObject
          - s3:PutObjectAcl
          Effect: Allow
          Resource:
          - '*'
          Sid: Stmt1481101640000
        - Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Effect: Allow
          Resource: arn:aws:logs:*:*:*
          Sid: Stmt1101716000
        - Action:
          - dynamodb:BatchGetItem
          - dynamodb:BatchWriteItem
          - dynamodb:DeleteItem
          - dynamodb:GetItem
          - dynamodb:GetRecords
          - dynamodb:PutItem
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:UpdateItem
          - dynamodb:Put
          Effect: Allow
          Resource:
          - '*'
          Sid: Stmt1481101716000
        - Action:
          - ses:SendEmail
          - ses:SendRawEmail
          Effect: Allow
          Resource:
          - '*'
          Sid: Stmt1481101765000
        Version: 2012-10-17
      PolicyName: root
      Roles:
      - Ref: RootRole
    Type: AWS::IAM::Policy
  RootRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
